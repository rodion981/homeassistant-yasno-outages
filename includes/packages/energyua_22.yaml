############################################
# includes/packages/energyua_22.yaml
# Графік відключень (Черга 2-2): парсинг + сенсори
############################################

# 1) MULTISCRAPE: тягнемо сирі тексти (з анти-кешем)
multiscrape:
  - name: energyua_22
    resource_template: "https://kyiv.energy-ua.info/cherga/2-2?_={{ now().timestamp()|int }}"
    scan_interval: 60
    headers:
      Referer: https://kyiv.energy-ua.info/
      User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) HomeAssistant
      Accept-Language: uk-UA,uk;q=0.9
    sensor:
      ######################################################
      # СЬОГОДНІ
      ######################################################
      - name: energyua_22_today_slot1_start_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на сьогодні\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення завтра|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[0][0] if p|length>=1 else '' }}

      - name: energyua_22_today_slot1_end_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на сьогодні\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення завтра|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[0][1] if p|length>=1 else '' }}

      - name: energyua_22_today_slot1_duration_h_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на сьогодні\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення завтра|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {# Сайт пише "тривалість 4:30 год. год." - зберігаємо як сирий текст, але більше не покладаємось на нього #}
          {% set d = sec | regex_findall(
            '[Тт]ривалість\\s*(\\d{1,2})(?::(\\d{2}))?\\s*год'
          ) %}
          {% if d|length>=1 %}
            {{ d[0][0] ~ (':' ~ d[0][1] if d[0][1] else '') }}
          {% endif %}
        unit_of_measurement: "год"

      - name: energyua_22_today_slot2_start_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на сьогодні\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення завтра|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[1][0] if p|length>=2 else '' }}

      - name: energyua_22_today_slot2_end_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на сьогодні\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення завтра|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[1][1] if p|length>=2 else '' }}

      - name: energyua_22_today_slot2_duration_h_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на сьогодні\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення завтра|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set d = sec | regex_findall(
            '[Тт]ривалість\\s*(\\d{1,2})(?::(\\d{2}))?\\s*год'
          ) %}
          {% if d|length>=2 %}
            {{ d[1][0] ~ (':' ~ d[1][1] if d[1][1] else '') }}
          {% endif %}
        unit_of_measurement: "год"

      ######################################################
      # ЗАВТРА
      # Якщо реального "Періоди відключень на завтра" нема,
      # ці значення будуть пусті
      ######################################################
      - name: energyua_22_tomorrow_slot1_start_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на завтра\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[0][0] if p|length>=1 else '' }}

      - name: energyua_22_tomorrow_slot1_end_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на завтра\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[0][1] if p|length>=1 else '' }}

      - name: energyua_22_tomorrow_slot1_duration_h_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на завтра\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set d = sec | regex_findall(
            '[Тт]ривалість\\s*(\\d{1,2})(?::(\\d{2}))?\\s*год'
          ) %}
          {% if d|length>=1 %}
            {{ d[0][0] ~ (':' ~ d[0][1] if d[0][1] else '') }}
          {% endif %}
        unit_of_measurement: "год"

      - name: energyua_22_tomorrow_slot2_start_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на завтра\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[1][0] if p|length>=2 else '' }}

      - name: energyua_22_tomorrow_slot2_end_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на завтра\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set p = sec | regex_findall(
            '[Зз]\\s*(\\d{1,2}[:.]\\d{2})\\s*до\\s*(\\d{1,2}[:.]\\d{2})'
          ) %}
          {{ p[1][1] if p|length>=2 else '' }}

      - name: energyua_22_tomorrow_slot2_duration_h_text
        select: "body"
        value_template: >-
          {% set m = value | regex_findall(
            'Періоди відключень на завтра\\s*([\\s\\S]*?)(?=Позначення до графіка|Відключення|$)'
          ) %}
          {% set sec = m[0] if m else '' %}
          {% set d = sec | regex_findall(
            '[Тт]ривалість\\s*(\\d{1,2})(?::(\\d{2}))?\\s*год'
          ) %}
          {% if d|length>=2 %}
            {{ d[1][0] ~ (':' ~ d[1][1] if d[1][1] else '') }}
          {% endif %}
        unit_of_measurement: "год"


# 2) TEMPLATE-СЕНСОРИ
sensor:
  - platform: template
    sensors:
      # ---- прапорець "є валідні часи на завтра"
      energyua_22_tomorrow_fresh:
        friendly_name: "Завтра: дані свіжі"
        value_template: >-
          {% set t1 = states('sensor.energyua_22_tomorrow_slot1_start_text')|trim %}
          {% set t2 = states('sensor.energyua_22_tomorrow_slot2_start_text')|trim %}
          {{ t1|regex_match('^\\d{1,2}[:.]\\d{2}$') or t2|regex_match('^\\d{1,2}[:.]\\d{2}$') }}

      # ===== СЬОГОДНІ: слот 1 =====
      energyua_22_today_slot1_start:
        friendly_name: "Сьогодні: початок 1-го періоду"
        device_class: timestamp
        value_template: >-
          {% set t = states('sensor.energyua_22_today_slot1_start_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') }}
          {% endif %}

      energyua_22_today_slot1_end:
        friendly_name: "Сьогодні: кінець 1-го періоду"
        device_class: timestamp
        value_template: >-
          {% set t = states('sensor.energyua_22_today_slot1_end_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') }}
          {% endif %}

      # Розрахунок тривалості слота 1 = (end - start) у годинах
      energyua_22_today_slot1_duration_h:
        friendly_name: "Сьогодні: тривалість 1-го, год"
        unit_of_measurement: "год"
        value_template: >-
          {% set s = states('sensor.energyua_22_today_slot1_start') %}
          {% set e = states('sensor.energyua_22_today_slot1_end') %}
          {% set bad = ['unknown','unavailable','none','','None'] %}
          {% if s not in bad and e not in bad and as_datetime(s) and as_datetime(e) %}
            {% set diff = (as_datetime(e) - as_datetime(s)).total_seconds() / 3600 %}
            {{ diff | round(2) }}
          {% endif %}

      # ===== СЬОГОДНІ: слот 2 =====
      energyua_22_today_slot2_start:
        friendly_name: "Сьогодні: початок 2-го періоду"
        device_class: timestamp
        value_template: >-
          {% set t = states('sensor.energyua_22_today_slot2_start_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') }}
          {% endif %}

      energyua_22_today_slot2_end:
        friendly_name: "Сьогодні: кінець 2-го періоду"
        device_class: timestamp
        value_template: >-
          {% set t = states('sensor.energyua_22_today_slot2_end_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') }}
          {% endif %}

      energyua_22_today_slot2_duration_h:
        friendly_name: "Сьогодні: тривалість 2-го, год"
        unit_of_measurement: "год"
        value_template: >-
          {% set s = states('sensor.energyua_22_today_slot2_start') %}
          {% set e = states('sensor.energyua_22_today_slot2_end') %}
          {% set bad = ['unknown','unavailable','none','','None'] %}
          {% if s not in bad and e not in bad and as_datetime(s) and as_datetime(e) %}
            {% set diff = (as_datetime(e) - as_datetime(s)).total_seconds() / 3600 %}
            {{ diff | round(2) }}
          {% endif %}

      # ===== ЗАВТРА =====
      energyua_22_tomorrow_slot1_start:
        friendly_name: "Завтра: початок 1-го періоду"
        device_class: timestamp
        availability_template: "{{ is_state('sensor.energyua_22_tomorrow_fresh','True') }}"
        value_template: >-
          {% set t = states('sensor.energyua_22_tomorrow_slot1_start_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') + timedelta(days=1) }}
          {% endif %}

      energyua_22_tomorrow_slot1_end:
        friendly_name: "Завтра: кінець 1-го періоду"
        device_class: timestamp
        availability_template: "{{ is_state('sensor.energyua_22_tomorrow_fresh','True') }}"
        value_template: >-
          {% set t = states('sensor.energyua_22_tomorrow_slot1_end_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') + timedelta(days=1) }}
          {% endif %}

      energyua_22_tomorrow_slot1_duration_h:
        friendly_name: "Завтра: тривалість 1-го, год"
        unit_of_measurement: "год"
        availability_template: "{{ is_state('sensor.energyua_22_tomorrow_fresh','True') }}"
        value_template: >-
          {% set s = states('sensor.energyua_22_tomorrow_slot1_start') %}
          {% set e = states('sensor.energyua_22_tomorrow_slot1_end') %}
          {% set bad = ['unknown','unavailable','none','','None'] %}
          {% if s not in bad and e not in bad and as_datetime(s) and as_datetime(e) %}
            {% set diff = (as_datetime(e) - as_datetime(s)).total_seconds() / 3600 %}
            {{ diff | round(2) }}
          {% endif %}

      energyua_22_tomorrow_slot2_start:
        friendly_name: "Завтра: початок 2-го періоду"
        device_class: timestamp
        availability_template: "{{ is_state('sensor.energyua_22_tomorrow_fresh','True') }}"
        value_template: >-
          {% set t = states('sensor.energyua_22_tomorrow_slot2_start_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') + timedelta(days=1) }}
          {% endif %}

      energyua_22_tomorrow_slot2_end:
        friendly_name: "Завтра: кінець 2-го періоду"
        device_class: timestamp
        availability_template: "{{ is_state('sensor.energyua_22_tomorrow_fresh','True') }}"
        value_template: >-
          {% set t = states('sensor.energyua_22_tomorrow_slot2_end_text')|trim %}
          {% if t and t|regex_match('^\\d{1,2}[:.]\\d{2}$') %}
            {{ today_at((t if ':' in t else t|replace('.',':')) ~ ':00') + timedelta(days=1) }}
          {% endif %}

      energyua_22_tomorrow_slot2_duration_h:
        friendly_name: "Завтра: тривалість 2-го, год"
        unit_of_measurement: "год"
        availability_template: "{{ is_state('sensor.energyua_22_tomorrow_fresh','True') }}"
        value_template: >-
          {% set s = states('sensor.energyua_22_tomorrow_slot2_start') %}
          {% set e = states('sensor.energyua_22_tomorrow_slot2_end') %}
          {% set bad = ['unknown','unavailable','none','','None'] %}
          {% if s not in bad and e not in bad and as_datetime(s) and as_datetime(e) %}
            {% set diff = (as_datetime(e) - as_datetime(s)).total_seconds() / 3600 %}
            {{ diff | round(2) }}
          {% endif %}

      # ===== СЬОГОДНІ: коротко =====
      energyua_22_today_brief:
        friendly_name: "Сьогодні: коротко"
        icon_template: mdi:calendar-today
        value_template: >-
          {% set bad = ['unknown','unavailable','none','','None'] %}

          {% set s1 = states('sensor.energyua_22_today_slot1_start') %}
          {% set e1 = states('sensor.energyua_22_today_slot1_end') %}
          {% set s2 = states('sensor.energyua_22_today_slot2_start') %}
          {% set e2 = states('sensor.energyua_22_today_slot2_end') %}

          {% set r1 = '' %}
          {% if s1 not in bad and e1 not in bad and as_datetime(s1) and as_datetime(e1) %}
            {% set s_txt = (as_timestamp(as_datetime(s1)|as_local) | timestamp_custom('%H:%M')) %}
            {% set e_txt = (as_timestamp(as_datetime(e1)|as_local) | timestamp_custom('%H:%M')) %}
            {% set dur = ((as_datetime(e1)-as_datetime(s1)).total_seconds()/3600) | round(2) %}
            {% set r1 = 'З ' ~ s_txt ~ ' до ' ~ e_txt ~ ' (' ~ dur ~ ' год)' %}
          {% endif %}

          {% set r2 = '' %}
          {% if s2 not in bad and e2 not in bad and as_datetime(s2) and as_datetime(e2) %}
            {% set s_txt = (as_timestamp(as_datetime(s2)|as_local) | timestamp_custom('%H:%M')) %}
            {% set e_txt = (as_timestamp(as_datetime(e2)|as_local) | timestamp_custom('%H:%M')) %}
            {% set dur = ((as_datetime(e2)-as_datetime(s2)).total_seconds()/3600) | round(2) %}
            {% set r2 = 'З ' ~ s_txt ~ ' до ' ~ e_txt ~ ' (' ~ dur ~ ' год)' %}
          {% endif %}

          {% if r1 and r2 %}{{ r1 ~ ';\n' ~ r2 }}
          {% elif r1 %}{{ r1 }}
          {% elif r2 %}{{ r2 }}
          {% else %}Даних на сьогодні немає{% endif %}

      # ===== ЗАВТРА: коротко =====
      # ВАЖЛИВО: тут БІЛЬШЕ НЕМАЄ availability_template.
      # Тобто навіть якщо завтра ще не опублікували графік і tomorrow_fresh == False,
      # сенсор все одно існує і віддає "Даних на завтра немає".
      energyua_22_tomorrow_brief:
        friendly_name: "Завтра: коротко"
        icon_template: mdi:calendar-clock
        value_template: >-
          {% set bad = ['unknown','unavailable','none','','None'] %}

          {% set s1 = states('sensor.energyua_22_tomorrow_slot1_start') %}
          {% set e1 = states('sensor.energyua_22_tomorrow_slot1_end') %}
          {% set s2 = states('sensor.energyua_22_tomorrow_slot2_start') %}
          {% set e2 = states('sensor.energyua_22_tomorrow_slot2_end') %}

          {% set r1 = '' %}
          {% if s1 not in bad and e1 not in bad and as_datetime(s1) and as_datetime(e1) %}
            {% set s_txt = (as_timestamp(as_datetime(s1)|as_local) | timestamp_custom('%H:%M')) %}
            {% set e_txt = (as_timestamp(as_datetime(e1)|as_local) | timestamp_custom('%H:%M')) %}
            {% set dur = ((as_datetime(e1)-as_datetime(s1)).total_seconds()/3600) | round(2) %}
            {% set r1 = 'З ' ~ s_txt ~ ' до ' ~ e_txt ~ ' (' ~ dur ~ ' год)' %}
          {% endif %}

          {% set r2 = '' %}
          {% if s2 not in bad and e2 not in bad and as_datetime(s2) and as_datetime(e2) %}
            {% set s_txt = (as_timestamp(as_datetime(s2)|as_local) | timestamp_custom('%H:%M')) %}
            {% set e_txt = (as_timestamp(as_datetime(e2)|as_local) | timestamp_custom('%H:%M')) %}
            {% set dur = ((as_datetime(e2)-as_datetime(s2)).total_seconds()/3600) | round(2) %}
            {% set r2 = 'З ' ~ s_txt ~ ' до ' ~ e_txt ~ ' (' ~ dur ~ ' год)' %}
          {% endif %}

          {% if r1 and r2 %}{{ r1 ~ ';\n' ~ r2 }}
          {% elif r1 %}{{ r1 }}
          {% elif r2 %}{{ r2 }}
          {% else %}Даних на завтра немає{% endif %}

# 3) БІНАРНИК: відключення зараз
binary_sensor:
  - platform: template
    sensors:
      energyua_22_outage_now:
        friendly_name: "Відключення зараз"
        value_template: >-
          {% set bad = ['unknown','unavailable','none',''] %}
          {% set nowt = now() %}
          {% set pairs = [
            (states('sensor.energyua_22_today_slot1_start'), states('sensor.energyua_22_today_slot1_end')),
            (states('sensor.energyua_22_today_slot2_start'), states('sensor.energyua_22_today_slot2_end'))
          ] %}
          {% set on = false %}
          {% for s,e in pairs %}
            {% if s not in bad and e not in bad and as_datetime(s) and as_datetime(e)
                  and nowt >= as_datetime(s) and nowt < as_datetime(e) %}
              {% set on = true %}
            {% endif %}
          {% endfor %}
          {{ on }}
        icon_template: >-
          {{ 'mdi:power-plug-off' if is_state('binary_sensor.energyua_22_outage_now','on') else 'mdi:power-plug' }}
